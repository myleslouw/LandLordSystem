{"ast":null,"code":"var _jsxFileName = \"D:\\\\OwnProjects\\\\WebDev\\\\LandLordSystem\\\\Client\\\\src\\\\PagesAndComponents\\\\AllUsersContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from \"react\";\n\n// create context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst allUsersContext = /*#__PURE__*/createContext();\nconst AllUsersContextProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  // the value that will be given to the context\n  const [users, setUsers] = useState([]);\n\n  // fetch a user from a fake backend API\n  /*   useEffect(() => {\r\n      const fetchUser = () => {\r\n        // this would usually be your own backend, or localStorage\r\n        // for example\r\n        fetch(\"https://randomuser.me/api/\")\r\n          .then((response) => response.json())\r\n          .then((result) => setUser(result.results[0]))\r\n          .catch((error) => console.log(\"An error occured\"));\r\n      };\r\n  \r\n      fetchUser();\r\n    }, []); */\n\n  return (\n    /*#__PURE__*/\n    // the Provider gives access to the context to its children\n    _jsxDEV(allUsersContext.Provider, {\n      value: {\n        users,\n        setUsers\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }, this)\n  );\n};\n_s(AllUsersContextProvider, \"gAXO2JN5F09+lSQAgkU4yvYNIT8=\");\n_c = AllUsersContextProvider;\nexport { allUsersContext, AllUsersContextProvider };\nvar _c;\n$RefreshReg$(_c, \"AllUsersContextProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","allUsersContext","AllUsersContextProvider","children","users","setUsers"],"sources":["D:/OwnProjects/WebDev/LandLordSystem/Client/src/PagesAndComponents/AllUsersContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\r\n\r\n// create context\r\nconst allUsersContext = createContext();\r\n\r\nconst AllUsersContextProvider = ({ children }) => {\r\n  // the value that will be given to the context\r\n  const [users, setUsers] = useState([]);\r\n\r\n  // fetch a user from a fake backend API\r\n/*   useEffect(() => {\r\n    const fetchUser = () => {\r\n      // this would usually be your own backend, or localStorage\r\n      // for example\r\n      fetch(\"https://randomuser.me/api/\")\r\n        .then((response) => response.json())\r\n        .then((result) => setUser(result.results[0]))\r\n        .catch((error) => console.log(\"An error occured\"));\r\n    };\r\n\r\n    fetchUser();\r\n  }, []); */\r\n\r\n  return (\r\n    // the Provider gives access to the context to its children\r\n    <allUsersContext.Provider value={{users, setUsers}}>\r\n      {children}\r\n    </allUsersContext.Provider>\r\n  );\r\n};\r\n\r\nexport { allUsersContext, AllUsersContextProvider };"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAEjE;AAAA;AACA,MAAMC,eAAe,gBAAGH,aAAa,EAAE;AAEvC,MAAMI,uBAAuB,GAAG,QAAkB;EAAA;EAAA,IAAjB;IAAEC;EAAS,CAAC;EAC3C;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;IAAA;IACE;IACA,QAAC,eAAe,CAAC,QAAQ;MAAC,KAAK,EAAE;QAACK,KAAK;QAAEC;MAAQ,CAAE;MAAA,UAChDF;IAAQ;MAAA;MAAA;MAAA;IAAA;EACgB;AAE/B,CAAC;AAAC,GAxBID,uBAAuB;AAAA,KAAvBA,uBAAuB;AA0B7B,SAASD,eAAe,EAAEC,uBAAuB;AAAG;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}